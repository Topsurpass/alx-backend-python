pipeline {
    agent any

    environment {
        // Define any environment variables if needed
        VENV = "venv"
        DOCKER_IMAGE = "temz/alx_msg_app"
        DOCKER_CREDENTIALS = "58978e30-7f61-4e3c-99a2-5cffa52085d0"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'master', 
                url: 'https://github.com/Topsurpass/alx-backend-python',
                credentialsId: 'ba8673de-3ae1-4106-8491-0e0ce54e55f9'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh '''
                    rm -rf ${VENV_PATH}
                    python3 -m venv ${VENV}
                    bash -c "source ${VENV}/bin/activate"
                    ${VENV}/bin/pip3 install --upgrade pip
                    ${VENV}/bin/pip3 install -r messaging_app/requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh '''
                    bash -c "source ${VENV}/bin/activate && pytest --junitxml=report.xml"
                    '''
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                dir('messaging_app') {
                    junit 'messaging_app/report.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('messaging_app/messaging_app') {
                    script {
                        sh 'docker build -t ${DOCKER_IMAGE}:v1.0 -f Dockerfile .'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        script {
                            // Use the Docker credentials for login and pushing
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            sh 'docker push ${DOCKER_IMAGE}:v1.0'
                        }
                    }
                }
            }
        }
        
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        failure {
            // Handle failure cases (optional)
            echo "Pipeline failed. Check logs for details."
        }
        success {
            echo "Pipeline completed successfully!"
        }
    }
}
