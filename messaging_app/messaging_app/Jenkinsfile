pipeline {
    agent any

    environment {
        // Define any environment variables if needed
        VENV = "venv"  // Virtual environment name
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Topsurpass/alx-backend-python',
                        credentialsId: 'f693b385-dc93-4553-929f-14590e4ba598' // Use your Jenkins credential ID
                    ]]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh '''
                    # Install required system dependencies
                    sudo apt-get update
                    sudo apt-get install -y pkg-config libmysqlclient-dev

                    # Create virtual environment
                    python3 -m venv ${VENV}
                    bash -c "source ${VENV}/bin/activate"
                    ${VENV}/bin/pip3 install --upgrade pip
                    ${VENV}/bin/pip3 install -r messaging_app/requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh '''
                    bash -c "source ${VENV}/bin/activate"
                    pytest --junitxml=report.xml
                    '''
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                dir('messaging_app') {
                    junit 'messaging_app/report.xml' // Publishes test report generated by pytest
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        failure {
            // Handle failure cases (optional)
            echo "Pipeline failed. Check logs for details."
        }
        success {
            echo "Pipeline completed successfully!"
        }
    }
}
